apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'io.fabric'

// read secret variables from <root>/secret.properties
// IMPORTANT: must be above `android {}` declaration
File secretPropsFile = file('../secret.properties')
if (secretPropsFile.exists()) {
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        safeLoad name as String, value
    }
}
// attach new global property to the `project`. Will not override by default
def safeLoad(String name, Object value, Boolean override = false) {
    if (!hasProperty(name) || override)
        project.set name, value
}
// returns value of requested variable or default (as a fallback)
String safeGet(String name, String defaultValue = '') {
    hasProperty(name) ? project[name] : defaultValue
}
// returns file from a path provided in properties file
File safeGetFile(String name) {
    String fileName = safeGet(name, null)
    fileName != null ? file(fileName) : null
}


android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "xyz.egor_d.defaultproject"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            File releasesDir = new File(
                    safeGet('RELEASES_PARENT_DIR', '~/APKs'),
                    safeGet('FOLDER_NAME', project.group as String)
            )
            if (!releasesDir.exists()) {
                releasesDir.mkdirs()
            }

            android.applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    if (output.name == "release") {
                        String fileName = [
                                defaultConfig.applicationId,
                                project.name,
                                defaultConfig.versionName,
                                android.defaultConfig.versionCode
                        ].join('-')

                        output.outputFile = new File(releasesDir, fileName + '.apk')
                    }
                }
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'

    compile 'com.android.support:recyclerview-v7:23.1.1'
    compile 'com.android.support:cardview-v7:23.1.1'
    compile 'com.android.support:design:23.1.1'
    compile 'com.android.support:appcompat-v7:23.1.1'

    // Rx
    compile 'io.reactivex:rxandroid:1.1.0'
    compile 'io.reactivex:rxjava:1.1.0'
    compile 'com.jakewharton.rxbinding:rxbinding:0.3.0'

    compile 'com.squareup.okhttp3:okhttp:3.0.1'
    compile 'com.squareup.retrofit2:converter-gson:2.0.0-beta3'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.0.0-beta3'
    compile 'com.squareup.okhttp3:logging-interceptor:3.0.1'
    compile 'com.google.code.gson:gson:2.5'

    // square libs
    compile 'com.jakewharton:butterknife:7.0.1'
    compile('com.squareup.retrofit2:retrofit:2.0.0-beta3') {
        exclude module: 'okhttp'
    }
    compile 'com.squareup.okhttp:logging-interceptor:2.6.0'
    compile 'com.squareup.retrofit:converter-gson:2.0.0-beta2'
    compile 'com.squareup.retrofit:adapter-rxjava:2.0.0-beta2'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.squareup:otto:1.3.8'

    // dagger
    compile 'com.google.dagger:dagger:2.0.2'
    apt 'com.google.dagger:dagger-compiler:2.0.2'
    provided 'org.glassfish:javax.annotation:10.0-b28'
}
